
package eu.glowacki.jaxws.client.delayed.proxy;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.3
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ICalculatorDelayed", targetNamespace = "http://glowacki.eu/delayed")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ICalculatorDelayed {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response&lt;eu.glowacki.jaxws.client.delayed.proxy.AddResponse&gt;
     */
    @WebMethod(operationName = "add")
    @RequestWrapper(localName = "add", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.Add")
    @ResponseWrapper(localName = "addResponse", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.AddResponse")
    public Response<AddResponse> addAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future&lt;? extends java.lang.Object&gt;
     */
    @WebMethod(operationName = "add")
    @RequestWrapper(localName = "add", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.Add")
    @ResponseWrapper(localName = "addResponse", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.AddResponse")
    public Future<?> addAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddResponse> asyncHandler);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     * @throws ServiceException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "add", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.Add")
    @ResponseWrapper(localName = "addResponse", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.AddResponse")
    @Action(input = "http://glowacki.eu/delayed/ICalculatorDelayed/addRequest", output = "http://glowacki.eu/delayed/ICalculatorDelayed/addResponse", fault = {
        @FaultAction(className = ServiceException_Exception.class, value = "http://glowacki.eu/delayed/ICalculatorDelayed/add/Fault/ServiceException")
    })
    public int add(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1)
        throws ServiceException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response&lt;eu.glowacki.jaxws.client.delayed.proxy.SubtractResponse&gt;
     */
    @WebMethod(operationName = "subtract")
    @RequestWrapper(localName = "subtract", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.Subtract")
    @ResponseWrapper(localName = "subtractResponse", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.SubtractResponse")
    public Response<SubtractResponse> subtractAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future&lt;? extends java.lang.Object&gt;
     */
    @WebMethod(operationName = "subtract")
    @RequestWrapper(localName = "subtract", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.Subtract")
    @ResponseWrapper(localName = "subtractResponse", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.SubtractResponse")
    public Future<?> subtractAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SubtractResponse> asyncHandler);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     * @throws ServiceException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "subtract", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.Subtract")
    @ResponseWrapper(localName = "subtractResponse", targetNamespace = "http://glowacki.eu/delayed", className = "eu.glowacki.jaxws.client.delayed.proxy.SubtractResponse")
    @Action(input = "http://glowacki.eu/delayed/ICalculatorDelayed/subtractRequest", output = "http://glowacki.eu/delayed/ICalculatorDelayed/subtractResponse", fault = {
        @FaultAction(className = ServiceException_Exception.class, value = "http://glowacki.eu/delayed/ICalculatorDelayed/subtract/Fault/ServiceException")
    })
    public int subtract(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1)
        throws ServiceException_Exception
    ;

}
